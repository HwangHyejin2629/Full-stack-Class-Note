- 자바 -> 상속, 구현, 오버라이딩, 어노테이션
- 디버깅 오류코드 오답노트 만들기

-기획
아이디어 - 
페이지 개수
버튼, 입력필드 어디에 배치할지
데이터베이스 어떻게 구성할지 - > 테이블개수, 컬럼 개수, 타입, 어떤 테이블끼리 관계맺는지
어떤기능을 만들지

-비전공자 공부
Computer Science 공부 ---정처기
코드너리


-------------------------------------------------------------------------------------------

1. HTTP(HyperText Transfer Protocol)
웹에서 클라이언트(사용자)와 서버 간에 데이터를 주고받기 위한 프로토콜이다.
많은 웹 기반 애플리케이션이 HTTP를 이용하고, 우리 프로젝트도 HTTP로 서버와 클라이언트 간에 통신을 할 것이다.

1) HyperText
다른 문서로 향하는 링크가 있는 텍스트
문서를 하이퍼텍스트로 만들기 위해서 HTML(HyperTextMarkupLanguage)를 사용한다.

2) 웹 서비스에서 HTTP를 어떤식으로 사용하는가?
HTTP Request 요청 (사용자의 데이터 객체 보냄) <-> Server Response 응답 (보여줄 화면 및 데이터 객체 보냄)
사용자는 브라우저(크롬,사파리,엣지 등)을 통해 서버에 HTTP요청(Request)를 전송할 수 있다.
브라우저의 주소창에 URL을 치고 엔터를 누르면 브라우저는 HTTP GET 요청을 해당 URL서버로 전송한다.
그리고 그 결과인 HTTP응답(Response)을 브라우저에 렌더링한다.

3) HTTP요청
GET /api/users?id=123 HTTP/1.1  -----요청내용 /http 버전
Host: www.example.com  ----요청주소
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)  Chrome/85.0.4183.102 Safari/537.36  ----브라우저버전
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8
Connection: keep-alive

요청메서드*** --요청할때 지정할 수 있는 메서드
이러한 메서드는 호스트에게 지정한 리소스에 어떤 작업을 하고싶은지 알려주는 역할을 한다. 
어디에서 뭘 하고싶은지	
GET		서버에서 리소스를 요청할 때 사용		데이터 조회 (예: 사용자 정보 가져오기)
POST		서버에 데이터를 전송할 때 사용		데이터 생성 (예: 새로운 게시글 작성)
PUT		서버의 기존 리소스를 업데이트할 때 사용	데이터 수정 (예: 사용자 정보 수정)
DELETE		서버의 리소스를 삭제할 때 사용		데이터 삭제 (예: 게시글 삭제)
PATCH		리소스의 일부를 업데이트할 때 사용		데이터 일부 수정 (예: 특정 필드만 업데이트)
비록 HTTP 메서드가 이런 기능을 한다고 하지만 실제 기능은 전적으로 API를 개발하는 개발자에게 달려있다.
요지는, 표에서 HTTP 메서드 '기능'의 이미란 '이런 기능을 위한 API에 사용하는게 좋다'의 뜻이다.

4) HTTP응답

HTTP/1.1 200 OK -----html 버전, 상태코드
Date: Tue, 24 Sep 2024 11:00:00 GMT -----응답받은 시간
Content-Type: text/html; charset=UTF-8   ----돌려받은 데이터 타입
Content-Length: 4576
Connection: keep-alive

<html lang="en">
</html>

(1)상태코드
잘 됐다
200	OK			요청이 성공적으로 처리되었음을 의미
201	Created			요청이 성공했으며, 새로운 리소스가 생성됨
204	No Content		요청이 성공했으나 반환할 콘텐츠가 없음
다른곳으로 이동
301	Moved Permanently	요청한 리소스가 영구적으로 다른 위치로 이동했음을 의미
302	Found			요청한 리소스가 일시적으로 다른 위치에 있음을 의미
요청잘못
400	Bad Request		요청이 잘못되어 서버가 이해할 수 없음
401	Unauthorized		인증이 필요함을 나타냄
403	Forbidden		서버가 요청을 거부함 -금지
404	Not Found		요청한 리소스를 찾을 수 없음
서버문제
500	Internal Server Error	서버에서 처리 중 오류가 발생함
502	Bad Gateway		서버가 게이트웨이 또는 프록시로부터 잘못된 응답을 받음
503	Service Unavailable		서버가 요청을 처리할 수 없음 (과부하 또는 유지 보수 상태)

(2)Content-Type
응답의 미디어 타입을 의미한다.
text/html				HTML 문서**			웹 페이지 콘텐츠 (HTML 파일)
text/plain				일반 텍스트 파일			단순 텍스트 파일
application/json			JSON 데이터**			API 응답, JSON 형식 데이터
application/xml			XML 데이터			XML 형식의 API 응답 또는 데이터
application/javascript		JavaScript 파일			웹 페이지에서 사용하는 자바스크립트 코드
application/x-www-form-urlencoded	폼 데이터 (키-값)로 인코딩된 데이터**	HTML 폼 제출 시 주로 사용
multipart/form-data		파일 업로드를 포함한 폼 데이터**	파일 업로드와 함께 전송되는 데이터
image/png			PNG 이미지			PNG 포맷의 이미지 파일
image/jpeg			JPEG 이미지			PEG 포맷의 이미지 파일
image/gif	GIF 이미지		GIF 포맷의 이미지 파일
audio/mpeg			MPEG 오디오 파일			MP3 파일
video/mp4			MP4 비디오 파일			MP4 비디오 파일
application/pdf			PDF 문서	PDF 파일
application/zip			ZIP 압축 파일			ZIP 압축된 파일

(3) Connection
-keep-alive (연결 유지)
클라이언트가 서버와의 연결을 유지하려고 할 때 사용된다.
기본적으로 HTTP/1.1에서 연결을 끊지 않고 여러 요청과 응답을 같은 연결을 통해 주고받는다.
장점: 여러 요청을 할 때 매번 새로운 연결을 생성하지 않아도 되므로 성능이 향상된다.
특히, 웹 페이지를 로드할 때 여러 리소스(HTML, CSS, 이미지 등)를 한꺼번에 요청할 때 유용하다.

-close (연결 종료) --한번 연결하고 끝
요청과 응답이 끝난 후 연결을 즉시 닫겠다는 의미다.
HTTP/1.0에서는 기본적으로 각 요청마다 연결을 닫는다.
장점: 서버 리소스를 절약할 수 있으나, 매번 새로운 연결을 생성해야 하므로 성능이 떨어질 수 있다.

(4) Response Body
<html lang="en">
</html>
화면을 어떻게 돌려받느냐
Response Body는 HTTP 응답의 일부로, 클라이언트가 요청한 리소스나 데이터를 포함하는 본문이다.
서버가 요청을 처리한 후 클라이언트에게 반환하는 "실제 콘텐츠가 이 부분에 담긴다."

- 데이터 포맷:
Response Body에는 다양한 형식의 데이터가 포함될 수 있다. 
서버는 클라이언트의 요청에 따라 적절한 포맷으로 데이터를 제공한다. 꼭 HTML로만 오는건 아니다
HTML: 웹 페이지 렌더링을 위한 HTML 문서
JSON: API 응답에서 자주 사용하는 데이터 형식
XML: 구조화된 데이터 전송에 사용
Plain Text: 단순 텍스트 데이터
이미지, 동영상: 바이너리 파일 형식

2. JSON이란?****
JSON(JavaScript Object Notation)은 데이터를 저장하고 전송하는 데 사용되는 경량의 데이터 교환 형식이다.
사람과 기계 모두 읽고 쓰기 쉽도록 설계되었으며, 주로 웹에서 클라이언트와 서버 간의 데이터 교환 형식으로 많이 사용된다. ---데이터 교환은 대부분 JSON으로 한다.

1) 주요 특징
-텍스트 기반
JSON은 텍스트로 구성되어 있으며, 사람이 읽기 쉬운 구조를 갖는다.
주로 데이터를 네트워크를 통해 전송하거나 파일로 저장하는 데 적합하다.

-언어 독립적
JSON은 특정 프로그래밍 언어에 종속되지 않는다.
대부분의 프로그래밍 언어에서 JSON을 쉽게 파싱하거나 생성할 수 있는 라이브러리를 제공한다.

-키-값 쌍
JSON 데이터는 키-값 쌍의 구조로 이루어진다.
각 키는 문자열로 나타내고, 값은 다양한 자료형(문자열, 숫자, 배열, 객체 등)이 될 수 있다.

-데이터 구조 표현
JSON은 객체, 배열, 숫자, 문자열, true, false, null과 같은 자료형을 표현할 수 있어, 복잡한 데이터 구조를 직관적으로 표현할 수 있다.

2) 기본 구조
객체(Object):
중괄호 {}로 감싸며, 여러 개의 키-값 쌍을 포함할 수 있다.
{
    "name": "John", ---- 키에 " "사용 (자바스크립트와 다르게)
    "age": 30,
    "city": "New York"
}

3) 장점
-경량 : 데이터의 표현이 간결하여 네트워크를 통해 데이터를 효율적으로 전송할 수 있다.
-호환성 : 대부분의 프로그래밍 언어에서 JSON을 지원하며, 데이터를 쉽게 파싱하고 생성할 수 있다.
-가독성 : 사람이 읽고 쓰기 쉬운 구조로 되어 있어, 디버깅과 유지보수에 유리하다.

3. 직렬화와 역직렬화
언어와 아키텍처가 서로 다른 APP1과 APP2이 있다고 할 때 데이터를 전송하려면 둘 다 이해할 수 있는 형태로 변환해야 한다.  ---라이브러리로 작업

1) 직렬화
메모리상의 객체를 특정 포맷(JSON,XML,바이너리 등)으로 변환하는것을 말한다.
이렇게 변환된 데이터를 파일로 저장하거나 네트워크를 통해 전송할 수 있다.
APP1 객체 -> JSON으로 변경 (보내기전)  

- 직렬화 목적
데이터 저장:데이터를 파일로 저장하거나 데이터베이스에 기록하기 위해 사용된다.
데이터 전송:네트워크를 통해 다른 애플리케이션이나 시스템으로 데이터를 전송할 때 사용된다.

2) 역직렬화
직렬화된 데이터를 다시 원래의 객체나 데이터 구조로 복원하는 과정이다.
전송된 후 이를 다시 사용할 수 있는 객체로 복구할 때 사용된다.
전송받은 JSON -> 객체

4. 서버
서버란 프로그램이다.  서빙을 하는것---우리가 만든 프로젝트를 서버에 올린다 다른사람들이 사용할 수 있도록
이 프로그램은 지정된 포트
예를 들어 8080포트에 소켓을 열고 클라이언트가 연결할 때까지 무한히 대기하며 기다린다.
그러다가 클라이언트가 연결하면 해당 클라이언트 소켓에서 요청을 받아와 수행하고 응답을 작성해 전달한다.

1) 정적 웹 서버
서버는 해당 HTML 파일에 아무 작업도 하지 않고, 파일을 있는 그대로 반환한다.
HTML, JS, CSS 만 보여준다.

(1) 정적 웹 서버 종류
Nginx, Apache: 성능과 확장성에 강점이 있는 정적 웹 서버.
GitHub Pages, Netlify, Vercel: 간단한 정적 웹사이트를 쉽게 배포할 수 있는 서비스.
Amazon S3: 대규모 정적 파일 저장 및 제공에 적합.
Lighttpd, Caddy, Python SimpleHTTPServer, Node.js http-server: 경량 웹 서버 또는 간단한 로컬 테스트용 서버.

(2) 웹 서버의 사용
아파치나 Nginx를 설치한 후 지정된 경로에 원하는 리소스 파일을 저장하면 해당 리소스는 자동으로 웹 서버로 접근할 수 있게 된다.
서버를 설치 및 설정하고 원하는 리소스를 경로에 지정하는 것 말고는 개발자가 따로 할 일이 없다.

2) 동적 웹 서버
사람에 따라 다르게 나타남
클라이언트의 요청에 따라 실시간으로 데이터를 처리하고 응답하는 서버다.
요청에 맞게 데이터를 생성하거나 수정하여 클라이언트에게 맞춤형 콘텐츠를 제공할 수 있으며, 
서버 측 언어(예: PHP, Node.js, Python 등)와 "데이터베이스를 사용" 해 데이터를 처리한다.
클라이언트가 누군지, 어떤 매개변수를 보내는지에 따라 같은 요청이라도 다른 응답을 받을 수 있다.

(1) 동적 웹 서버의 주요 특징
-실시간 데이터 처리: 요청이 들어올 때마다 데이터를 처리해 맞춤형 페이지나 응답을 제공함.
-서버 측 처리: 클라이언트의 요청을 서버에서 처리한 후 결과를 반환함.
-데이터베이스와의 상호작용: 클라이언트 요청에 따라 데이터베이스에서 데이터를 읽고 쓰는 작업을 수행.
-동적 콘텐츠 생성: HTML, JSON 등 요청마다 다른 데이터를 동적으로 생성하여 제공함.

(2) 동적 웹 서버의 동작 흐름
클라이언트 요청: 브라우저에서 서버로 HTTP 요청 전송.
->서버 측 처리: 서버에서 스크립트 실행 및 데이터베이스 연동.
->데이터베이스 연동: 필요한 데이터를 데이터베이스에서 조회 또는 저장.
->동적 콘텐츠 생성: 요청에 맞는 동적인 콘텐츠 생성.
->클라이언트 응답: 클라이언트에게 동적 데이터를 반환하여 화면에 렌더링.

(3) 동적 웹 서버의 예
-Node.js: 자바스크립트를 사용해 비동기 방식으로 동적 콘텐츠를 처리.
-PHP: 서버 측 스크립트 언어로, 워드프레스 같은 CMS에서 사용.
-Python (Django, Flask): 파이썬 기반 웹 프레임워크로, 데이터베이스와의 연동이 강력함.
-Ruby on Rails: Ruby 언어 기반으로 MVC 구조를 사용한 동적 웹 애플리케이션 구축.
-ASP.NET: C#과 같은 언어를 사용해 동적 콘텐츠 제공.

(4) 장단점
-장점
개별 사용자 맞춤형 콘텐츠 제공: 사용자 맞춤형 데이터 제공 가능. ---00님 환영합니다
실시간 데이터 처리: 클라이언트의 요청에 따라 실시간으로 데이터 처리.
복잡한 애플리케이션 구축 가능: 로그인 시스템, 데이터 조회/입력 등 복잡한 기능 구현 가능.

-단점
복잡성: 설정과 관리가 정적 웹 서버보다 복잡함.
성능 부담: 요청마다 데이터를 처리하므로 트래픽이 많으면 성능에 부담이 갈 수 있음. --서버가 터졌다!
	-> 해결법: 줄세우는 알고리즘 Queue 사용
보안 문제: 실시간 처리 과정에서 해킹 시도를 막기 위한 보안 관리가 중요함.
	SQL injection : 쿼리로 날려버려서 데이터베이스로 바로 들어가게 하는 해킹방법

5. 자바 서블릿 컨테이너/엔진
자바는 원래 화면이 없는데, 
자바 서블릿 컨테이너= 자바서블릿(http+java)의 묶음= Tomcat 프로그램
자바 서블릿 컨테이너(Java Servlet Container) 또는 **서블릿 엔진(Servlet Engine)**은 자바 웹 애플리케이션에서 동적으로 생성된 콘텐츠를 처리하는 서버 프로그램이다.
Servlet : java기반 + html  --> JSP http기반+java  JSP를 Servlet으로 변경해서 사용

자바 서블릿 컨테이너(Java Servlet Container) 또는 **서블릿 엔진(Servlet Engine)**은 자바 웹 애플리케이션에서 동적으로 생성된 콘텐츠를 처리하는 서버 프로그램이다.
클라이언트로부터 HTTP 요청을 받아 서블릿으로 처리하고, 그 결과를 클라이언트에게 응답하는 역할을 수행한다.
개발자들은 서블릿 엔진을 설치한 후, 서블릿 엔진에게 본인이 개발한 비즈니스 로직,즉 클래스 파일과 해당 클래스 파일을 어느 요청에서 실행해야 하는지 알려줘야 한다.
이때 우리는 서블릿 엔진이 이해할 수 있는 형태로 클래스 파일을 작성해야 한다.
컨테이너 : 데이터를 저장하는 공간
Spring이 Sublet으로 작동한다.


1) avax.servlet.httpHttpServlet
서블릿 엔진이 이해할 수 있는 클래스는 Javax.servlet.httpHttpServlet를 상속받는 서브클래스를 의미한다.
우리는 HttpServlet을 상속받는 클래스를 작성해 특정 형식에 맞춰 압축해 전달한다.
이렇게 개발자는 서블릿 엔진을 이용해 서버를 처음부터 구현하지 않고도 각기 다른 비즈니스 로직을 구현하고 배포할 수 있다.

2) 대표적인 서블릿 컨테이너
-Apache Tomcat:오픈 소스 서블릿 컨테이너로, 서블릿과 JSP를 처리하는 가장 널리 사용되는 서버.
	우리가 만든 프로젝트를 외부에서 접속하게 해주는것
-Jetty:경량화된 서블릿 컨테이너로, 개발 환경에서 자주 사용되며 임베디드 서버로 통합하기 좋음.
-WildFly (JBoss):JBoss 기반의 Java EE 애플리케이션 서버로, 엔터프라이즈급 기능을 제공.
-GlassFish:오라클이 제공하는 Java EE 애플리케이션 서버로, Java EE 표준 스펙을 지원.
-IBM WebSphere:IBM의 상용 Java EE 애플리케이션 서버로, 대규모 기업 환경에서 사용.

3) 서블릿 컨테이너와 웹 서버의 차이
서블릿 컨테이너는 자바로 작성된 동적 콘텐츠(서블릿, JSP)를 처리하고, HTTP 요청을 처리할 수 있는 자바 기반 서버다.
웹 서버는 정적 콘텐츠(HTML, CSS, 이미지 등)를 처리하는 데 중점을 둔 서버이며, 정적 파일을 클라이언트에 전달하는 역할을 한다.
서블릿 컨테이너는 웹 서버와 통합되어 동작할 수 있으며, 웹 서버가 HTTP 요청을 받으면 이를 서블릿 컨테이너로 전달하여 동적 처리를 맡긴다.
get 요청 name="홍" -> java -> DB -> Select
동적, 정적 같이 사용

4) 요약
자바 서블릿 컨테이너(Tomcat)는 클라이언트의 HTTP 요청을 받아 서블릿을 통해 동적인 콘텐츠(Tomcat)를 생성하고 응답을 반환하는 역할을 한다.
Tomcat, Jetty, WildFly와 같은 다양한 서블릿 컨테이너가 있으며, 이들은 서블릿의 생명 주기, 멀티스레드 처리, 요청 매핑 등을 관리한다.
정적 파일을 처리(Apache)하는 웹 서버와 달리, 서블릿 컨테이너는 동적 콘텐츠를 생성하고 복잡한 비즈니스 로직을 처리하는 데 중점을 둔다.

6. 백엔드 개발
1)  스프링부트 (Spring Boot)
스프링 부트는 스프링 프레임워크 기반의 애플리케이션을 빠르고 쉽게 개발할 수 있도록 도와주는 프레임워크다.
스프링 부트는 복잡한 설정을 최소화하고, 기본적인 설정을 자동으로 처리하며, 내장 웹 서버(Tomcat 등)를 제공하여 독립 실행 가능한 애플리케이션을 만들 수 있다.

스프링 부트의 특징
자동 설정: 많은 설정을 자동으로 처리하여 개발 생산성을 높인다.
내장 서버: Tomcat, Jetty 등 내장 웹 서버를 지원하여 애플리케이션을 쉽게 실행할 수 있다.
독립 실행 가능한 JAR 파일: 별도의 외부 서버 설정 없이 애플리케이션을 패키징할 수 있다.

2) 그래들 (Gradle)---pakage.js과 비슷한 역할, 저장소에서 다운로드 받아준다.
자바, 스프링 등의 프로젝트에서 빌드 자동화 도구로 사용된다.
Gradle은 빌드 스크립트에 의한 의존성 관리, 테스트, 패키징 등을 자동화하는 데 중점을 둔다.
Groovy 또는 Kotlin DSL을 사용하여 빌드 스크립트를 작성할 수 있다.

그래들의 기능
의존성 관리: 프로젝트에 필요한 라이브러리를 자동으로 다운로드하고 관리. 
	dependencies 에 필요한 라이브러리를 추가
빌드 자동화: 컴파일, 테스트, 배포, 패키징 같은 일련의 작업을 자동화.
유연성: 다양한 언어와 플랫폼을 지원하며, 사용자 정의 빌드 작업을 쉽게 작성할 수 있음.

3) 롬복 (Lombok)

자바 애플리케이션 개발 시 자주 사용되는 코드(예: Getter, Setter, ToString, Equals, HashCode 메서드 등)를 자동으로 생성해주는 라이브러리다.
롬복은 애노테이션을 사용해 코드 중복을 줄이고, 가독성을 높여준다.
데이터 하나로 퉁칠 수 있다
@Getter/@Setter: 클래스의 필드에 대한 getter/setter 메서드를 자동 생성.
@ToString: 객체의 toString() 메서드를 자동으로 생성.
@EqualsAndHashCode: equals()와 hashCode() 메서드를 자동 생성.
@Data: @Getter, @Setter, @ToString, @EqualsAndHashCode 등을 한 번에 생성.
@Builder: 객체를 빌더 패턴으로 생성하는 메서드 자동 생성.

4) 포스트맨 (Postman)
백엔드 처리 반환 잘됐나 확인하는 도구
API를 테스트하고 개발하는 데 사용되는 도구다.
주로 RESTful API의 요청과 응답을 테스트하는데 유용하다

포스트맨의 주요 기능
API 요청 테스트: HTTP 요청(GET, POST, PUT, DELETE 등)을 쉽게 만들고 응답을 확인할 수 있다.
컬렉션 관리: 여러 API 요청을 모아 컬렉션으로 관리하여 테스트 시나리오를 쉽게 구성할 수 있다.
자동화 테스트: API 요청의 결과를 자동화 테스트로 설정할 수 있다.
환경 관리: 서로 다른 환경(개발, 스테이징, 프로덕션 등)에 맞춘 변수 설정을 지원.

5) REST (Representational State Transfer)

REST는 웹 서비스 아키텍처 스타일로, 주로 HTTP를 통해 자원을 주고받는 방식을 정의한다. 
RESTful 시스템에서는 다음과 같은 원칙을 따른다:

리소스 기반: URI는 자원을 나타내며, 각 자원은 고유한 URI를 가진다.  --- URL과 URI의 차이?? 
HTTP 메서드 사용: CRUD 작업에 맞춰 GET(조회), POST(생성), PUT(수정), DELETE(삭제) 등의 메서드를 사용.
무상태성: 서버는 클라이언트의 상태를 저장하지 않고, 각 요청이 독립적이다.
캐시 가능: 클라이언트는 서버 응답을 캐시(자주사용되는것 저장)할 수 있어, 성능을 향상시킬 수 있다.

6) 레이어드 아키텍처 (Layered Architecture)
애플리케이션을 서로 독립적인 계층으로 나누어 설계하는 방식으로, 
각 레이어가 특정한 역할을 수행하며 서로 간에 느슨한 결합을 유지하는 것을 목표로 한다.

결합도는 느슨하게 : 모듈간의 상호 의존성 결합도가 높으면 교체가 어렵다
응집도는 높게 : 하나의 객체 내에서 서로 밀접하게 관련이 있는지, 하나의 객체에는 하나의 기능만

(1) 레이어드 아키텍처의 구성
프레젠테이션 계층 (Presentation Layer):  ---React
사용자와 상호작용하는 계층으로, UI를 처리하며 클라이언트 요청을 처리하고 응답을 반환.
예: 웹 페이지, API 엔드포인트

비즈니스 계층 (Business Layer):
비즈니스 로직을 처리하는 계층으로, 도메인 모델을 관리하고 애플리케이션의 핵심 로직을 담당.
예: 서비스 클래스

영속성 계층 (Persistence Layer): ---DB 상호
데이터베이스와 상호작용하는 계층으로, 데이터를 저장하고 조회하는 기능을 담당.
예: 리포지토리, DAO

데이터베이스 계층 (Database Layer): ---DBMS 
실제 데이터베이스를 관리하는 계층으로, 데이터를 저장하는 물리적 DBMS.
예: MySQL, PostgreSQL, MongoDB

7. Todo 서비스 만들기
todo 생성, todo 검색, todo 수정, todo 삭제 라는 네가지 기능을 제공할 것이다. --CRUD
생성,검색,수정,삭제 네 가지 기본 기능을 CRUD(Create,Read,Update,Delete)라고 한다.
이 기능들을 REST API 형태로 구현하고, 그 과정에서 아키텍쳐 디자인, 패턴, JPA에 대해 공부해보자.

8. Amazon Corretto 설치하기 
아마존에서 배포하는 JDK이다.
무료이며 상업적으로 사용 가능하고, 
이후 일래스틱 빈스톡을 이용해 배포할 때 일래스틱 빈스톡 환경에서도 같은 배포본을 사용하기 때문이다.
책에서는 11버전을 받았으나 17버전을 사용해보자.

기존 JDK 삭제 -> 
https://docs.aws.amazon.com/corretto/latest/corretto-17-ug/downloads-list.html -> 설치파일 받아서 설치

일래스틱 빈스톡 (Elastic Beanstalk)
아마존 웹 서비스(AWS)에서 제공하는 **플랫폼 서비스(PaaS)**로, 
애플리케이션을 쉽게 배포하고 관리할 수 있도록 도와준다.
사용자는 애플리케이션 코드를 업로드하면, Elastic Beanstalk이 자동으로 필요한 인프라(서버, 네트워크, 데이터베이스 등)를 설정하고 애플리케이션을 배포한다.

9. 이클립스 설치
책에서는 어떤 버전을 사용하라고 명시가 되어있지는 않았기 때문에 24-06 버전을 사용해보자
https://www.eclipse.org/downloads/packages/release/2024-06/r
Eclipse IDE for Java Developer를 다운받는다. --옆에 작은 거  Windows x86_64 누르기

10. 스프링 프레임워크와 의존성 주입
자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크로,   --개조가능, 밀키트같은거 + 첨가가능 확장
주로 엔터프라이즈급 애플리케이션을 개발하는 데 사용된다.
스프링 프레임워크는 다양한 기능을 제공하여 자바 애플리케이션의 개발을 쉽게 하고, 유지 보수성을 향상시킨다.
스프링의 주요 목표 : 경량성, 유연성, 확장성을 제공하는 것이다.

※ 오픈소스
소스코드가 공개돼 있다는 뜻이다.

※ 프레임워크
개발자들이 확장해서 사용할 수 있는 코드를 뜻한다.
- 확장해서 사용한다는 것은 프레임워크가 제공하는 클래스나 라이브러리를 사용하거나, 프레임워크가 제공하는 클래스나 인터페이스를 상속 및 구현해 우리 코드를 프레임워크의 일부로 실행하는것을 의미한다.

스프링 프레임워크에서 제공하는 주요 서브 프레임워크

1) 스프링 코어 (Spring Core)
설명: 스프링의 핵심 모듈로, **의존성 주입(DI)**과 **제어의 역전(IoC)**을 지원한다. 
스프링의 기본적인 애플리케이션 구성을 위한 모듈이다.
주요 기능: 빈(bean) 설정 및 관리, 의존성 주입, IoC 컨테이너 관리.  
	의존성주입 : 인형에 건전지를 넣어주겠다.

2) 스프링 AOP (Aspect-Oriented Programming)
클래스중에 공통으로 사용하는 부분이 있으니, 매서드를 한번 작성하고 가져다 씀
설명: 관점 지향 프로그래밍을 지원하는 모듈로, 공통적으로 적용되는 관심사를 분리하여 코드 중복을 줄이고 유지보수성을 높인다.
주요 기능: 로깅, 보안, 트랜잭션 관리, 예외 처리 등 공통 로직의 분리.

3) 스프링 ORM (Spring ORM)
설명: 스프링 프레임워크에서 **객체와 관계형 데이터베이스 간의 매핑(ORM)**을 지원하는 모듈이다.
스프링 ORM은 자바 객체와 데이터베이스 테이블 간의 상호작용을 간소화하고, 
"데이터베이스 연동에 필요한 복잡한 코드를 줄여준다." ---핵심! 
다양한 ORM 프레임워크를 지원하며, 스프링의 트랜잭션 관리와 통합되어 데이터베이스 작업을 효율적으로 처리할 수 있다.

4) 스프링 Web (Spring Web)
스프링 Web은 스프링 MVC 패턴을 기반으로 웹 애플리케이션을 개발하는 데 사용된다.
HTML 페이지를 렌더링하고, 클라이언트 요청을 처리하여 동적인 웹 페이지를 생성하는 것을 목표로 한다.
주로 서버 측에서 HTML, JSP, Thymeleaf 등의 템플릿을 사용해 사용자에게 페이지를 렌더링하는 전통적인 웹 애플리케이션에 적합하다.

주요 특징:
MVC 아키텍처 지원: Model, View, Controller로 애플리케이션을 구성하여 비즈니스 로직과 프레젠테이션을 분리한다.
동적 콘텐츠 생성: 서버 측에서 HTML, JSP, Thymeleaf 등을 렌더링해 클라이언트에게 동적 페이지를 제공한다.
폼 데이터 처리: 사용자로부터 받은 폼(<form> } 데이터를 처리하고, 그 결과를 클라이언트에게 전달하는데 사용된다.

5) 스프링 MVC (Spring Web MVC)
설명: MVC 패턴을 기반으로 웹 애플리케이션을 개발할 수 있도록 지원하는 모듈이다. 프론트엔드와 백엔드 간의 HTTP 요청 및 응답 처리를 담당한다.
주요 기능: RESTful 웹 서비스, 데이터 바인딩, 폼 처리, API 개발.

6) 스프링 시큐리티 (Spring Security)
설명: 애플리케이션의 인증 및 권한 부여를 관리하는 모듈로, 보안 기능을 쉽게 구현할 수 있도록 한다.
주요 기능: 사용자 인증, 권한 부여, 세션 관리, CSRF 보호, 암호화 기능 등.
직접 만들지 않고도 로그인, 보안 제공 모듈

7) 스프링 부트 (Spring Boot)
설명: 스프링 애플리케이션을 간편하게 설정하고 실행할 수 있도록 도와주는 프레임워크다. 내장 서버(Tomcat, Jetty 등)를 제공하여 빠르게 독립 실행형 애플리케이션을 개발할 수 있다.
주요 기능: 자동 설정, 내장 웹 서버, 간편한 프로젝트 설정 및 빌드.

11. 스프링의 핵심 개념
1) IoC (Inversion of Control) :  제어의 역전  ****
@Component, @Service, @RestController @Repository 어노테이션이 붙은 클래스를 스프링부트가
애플리케이션이 실행될때 Bean 으로 만들어져 객체 컨테이너에 singleton 방식으로 저장해 놓는다. (한번 저장됨)
list에 저장해야하는 Entity -> 싱글톤 패턴으로 만들면 안됨


생명주기를 스프링한테 맡겨라 객체 만들때 함수 안에서만 가능하다.
java 는 우리가 필요할때 객체를 만들었으나
**IoC (Inversion of Control, 제어의 역전)**은 객체의 생성과 관리를 개발자가 아닌 프레임워크나 컨테이너가 대신 관리하도록 하는 디자인 패턴이다.
전통적인 객체 지향 프로그래밍에서 객체 간의 의존성을 개발자가 직접 처리하는 반면, IoC는 이 흐름을 역전시켜 스프링 프레임워크와 같은 컨테이너가 객체 간의 의존성을 주입하고 관리한다.
IoC는 애플리케이션의 유연성과 유지보수성을 높이는 데 기여하며, 스프링 프레임워크에서 가장 핵심적인 개념 중 하나다.

(1) IoC의 주요 개념:
-의존성 주입 (Dependency Injection, DI):
IoC의 구체적인 구현 방법으로, 객체가 스스로 의존성을 관리하는 것이 아니라, 외부에서 필요한 의존성을 주입하는 방식이다.
스프링에서 가장 일반적으로 사용되는 방법이다.
필드, 생성자, 세터 메서드를 통해 의존성을 주입할 수 있다. 

-제어의 역전:
전통적으로는 개발자가 객체를 직접 생성하고 관리하지만, IoC에서는 객체의 생성과 라이프사이클을 스프링 컨테이너가 제어하게 된다.
즉, 개발자가 아니라 프레임워크가 객체의 생명 주기를 관리하는 방식이다.

-스프링 IoC 컨테이너: --스프링에서 관리하고자 하는 객체를 모아놓은것
스프링에서 IoC는 ApplicationContext 또는 BeanFactory라는 IoC 컨테이너를 통해 구현된다.
이 컨테이너는 애플리케이션에서 필요한 객체(빈)를 생성하고, 필요한 의존성을 주입해 준다.
컨테이너는 XML, Java 애노테이션, Java 설정 클래스를 통해 설정된 빈 정의를 보고, 그 빈들을 생성하고 관리한다.

(2) IoC의 동작 방식
객체 등록 (빈 등록)
-스프링 IoC 컨테이너는 **빈(Bean)**이라는 형태로 객체를 관리한다.
빈은 애플리케이션의 주요 구성 요소이며, 스프링 설정 파일이나 애노테이션으로 등록된다.

-의존성 주입
객체(빈) 간의 의존성은 컨테이너가 객체를 생성할 때 자동으로 주입한다.
객체가 필요로 하는 의존성(다른 객체)은 필드, 생성자, 또는 세터 메서드에 의해 외부에서 주입된다.

-빈 생성과 라이프사이클 관리
IoC 컨테이너는 애플리케이션이 실행될 때 모든 빈을 생성하고, 해당 빈의 라이프사이클을 관리한다.
애플리케이션이 종료되면 필요한 리소스 정리 작업도 수행된다.





